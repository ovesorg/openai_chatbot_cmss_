name: GraphQl OpenAI Chatbot CMSS for OVES
on:
  push:
    branches:
      - fastapi

env:
  IMAGE_NAME: chatbot
  AWS_ACCESS_KEY_ID: ${{ secrets.DEV_CODEDEPLOY_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DEV_CODEDEPLOY_AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: eu-central-1
  S3_BUCKET: ${{ secrets.DEV_CODEDEPLOY_S3_BUCKET }}
  APPLICATION_NAME: ${{ secrets.APPLICATION_NAME }}
  DEPLOYMENT_GROUP: ${{ secrets.DEV_DEPLOYMENT_GROUP }}
  NEW_OPENAI_API_KEY:  ${{ secrets.NEW_OPENAI_API_KEY }}
  PINECONE_API_KEY:  ${{ secrets.PINECONE_API_KEY }}
  BRANCH_NAME: dev

jobs:
  build:
    runs-on: ubuntu-latest
    name: build and deploy on staging
    steps:
      - uses: actions/checkout@v2

  build-push-image-and-codedeploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          # Determine the version based on the branch/tag name
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          
          # Use Docker `latest` tag convention for master branch
          [ "$VERSION" == "master" ] && VERSION=latest

          # Output the image ID and version for logging
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          mv .env.sample .env

          docker buildx build . --file Dockerfile --tag $IMAGE_ID:dev --platform linux/arm64/v8 --build-arg OPENAI_API_KEY=${{ secrets.OPENAI_ACCESS_KEY }} --push
          zip -r build.zip appspec.yml scripts docker-compose.yml 

      - name: Upload
        id: upload
        uses: prabodhtiwari/aws-code-deploy@v1
        with:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          APPLICATION_NAME: ${{ env.APPLICATION_NAME }}
          S3_BUCKET: ${{ env.S3_BUCKET }}
          COMMAND: 'upload'
          ZIP_FILE: 'build.zip'
      - name: Deploy
        id: deploy
        uses: prabodhtiwari/aws-code-deploy@v1
        with:
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          APPLICATION_NAME: ${{ env.APPLICATION_NAME }}
          DEPLOYMENT_GROUP: ${{ env.DEPLOYMENT_GROUP }}
          S3_BUCKET: ${{ env.S3_BUCKET }}
          COMMAND: 'deploy'
          WAIT: 'true'
          IGNORE_APPLICATION_STOP_FAILURES: 'true'
          FILE_EXISTS_BEHAVIOR: 'OVERWRITE'
